.section .itcm

YUV2RGB_ClampRangeBitTable:
	.byte 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0
	.byte 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0
	.byte 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0
	.byte 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0
	.byte 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0
	.byte 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0
	.byte 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0
	.byte 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0
	.byte 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0
	.byte 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0
	.byte 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0
	.byte 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0
	.byte 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0
	.byte 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0
	.byte 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0
	.byte 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0
	.byte 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0
	.byte 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1
	.byte 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 0x4
	.byte 0x4, 0x4, 0x4, 0x4, 0x4, 0x4, 0x4, 0x4, 0x5, 0x5, 0x5, 0x5, 0x5, 0x5, 0x5, 0x6
	.byte 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x7, 0x7, 0x7, 0x7, 0x7, 0x7, 0x7, 0x8, 0x8
	.byte 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0xA, 0xA
	.byte 0xA, 0xA, 0xA, 0xA, 0xA, 0xA, 0xB, 0xB, 0xB, 0xB, 0xB, 0xB, 0xB, 0xC, 0xC, 0xC
	.byte 0xC, 0xC, 0xC, 0xC, 0xC, 0xD, 0xD, 0xD, 0xD, 0xD, 0xD, 0xD, 0xD, 0xE, 0xE, 0xE
	.byte 0xE, 0xE, 0xE, 0xE, 0xE, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0x10, 0x10, 0x10, 0x10
	.byte 0x10, 0x10, 0x10, 0x10, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x12, 0x12, 0x12, 0x12
	.byte 0x12, 0x12, 0x12, 0x12, 0x13, 0x13, 0x13, 0x13, 0x13, 0x13, 0x13, 0x14, 0x14, 0x14, 0x14, 0x14
	.byte 0x14, 0x14, 0x14, 0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 0x16, 0x16, 0x16, 0x16, 0x16, 0x16
	.byte 0x16, 0x16, 0x16, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18
	.byte 0x18, 0x18, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A
	.byte 0x1A, 0x1A, 0x1B, 0x1B, 0x1B, 0x1B, 0x1B, 0x1B, 0x1B, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C
	.byte 0x1C, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1F
	.byte 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F
	.byte 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F
	.byte 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F
	.byte 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F
	.byte 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F
	.byte 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F
	.byte 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F
	.byte 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F
	.byte 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F
	.byte 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F
	.byte 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F
	.byte 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F
	.byte 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F
	.byte 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F
	.byte 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F
	.byte 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F

.align 4


COEF_RV = 27525 //Add one V aswell //93061
COEF_GU = -22544
COEF_GV = -23396 //Mul by 2
COEF_BU = 25297 //Mul by 2 and add one U aswell //116130

.global yuv2rgb_new
yuv2rgb_new:
	stmfd sp!, {r4-r11, lr}
	ldr lr,= (144*128)//(192 * 128)
loop:
	ldrh r9, [r1, #128]
	ldrh r8, [r1], #2
	orr r8, r8, r9, lsl #16
	//Get U and V
	and r3, r8, #0xFF	//U
	and r4, r9, #0xFF	//V
	sub r3, #128
	sub r4, #128
	ldr r11,= (((COEF_GV & 0xFFFF) << 16) | (COEF_GU & 0xFFFF))
	ldr r12,= (((COEF_RV & 0xFFFF) << 16) | (COEF_BU & 0xFFFF))
	//Calculate Rbase (R - Y)
	smlawt r5, r4, r12, r4
	//Calculate Gbase (G - Y)
	smulwt r6, r4, r11
	mov r6, r6, lsl #1
	smlawb r6, r3, r11, r6
	//Calculate Bbase (B - Y)
	smulwb r7, r3, r12
	add r7, r3, r7, lsl #1

	ldr r3, [r0], #4
	and r4, r3, #0xFF
	sub r4, #4
	ldr r10,= (YUV2RGB_ClampRangeBitTable + 256)
	add r10, r4
	ldrb r4, [r10, r5]
	ldrb r11, [r10, r6]
	ldrb r12, [r10, r7]
	orr r4, r4, r11, lsl #5
	orr r4, r4, r12, lsl #10
	orr r4, r4, #0x8000

	mov r11, r3, lsr #8
	and r11, r11, #0xFF
	ldr r10,= (YUV2RGB_ClampRangeBitTable + 256)
	add r10, r11
	ldrb r11, [r10, r6]
	ldrb r12, [r10, r7]
	ldrb r10, [r10, r5]
	orr r10, r10, r11, lsl #5
	orr r10, r10, r12, lsl #10
	orr r10, r10, #0x8000
	orr r10, r4, r10, lsl #16
	str r10, [r2], #4
	//second line
	ldr r9, [r0, #252]
	and r4, r9, #0xFF
	sub r4, #1
	ldr r10,= (YUV2RGB_ClampRangeBitTable + 256)
	add r10, r4
	ldrb r4, [r10, r5]
	ldrb r11, [r10, r6]
	ldrb r12, [r10, r7]
	orr r4, r4, r11, lsl #5
	orr r4, r4, r12, lsl #10
	orr r4, r4, #0x8000

	mov r11, r9, lsr #8
	and r11, r11, #0xFF
	add r11, #3
	ldr r10,= (YUV2RGB_ClampRangeBitTable + 256)
	add r10, r11
	ldrb r11, [r10, r6]
	ldrb r12, [r10, r7]
	ldrb r10, [r10, r5]
	orr r10, r10, r11, lsl #5
	orr r10, r10, r12, lsl #10
	orr r10, r10, #0x8000
	orr r10, r4, r10, lsl #16
	str r10, [r2, #508]

	//loop unrolling

	//Get U and V
	mov r4, r8, lsr #24	//V
	mov r8, r8, lsr #8
	and r8, r8, #0xFF	//U
	sub r8, #128
	sub r4, #128
	ldr r11,= (((COEF_GV & 0xFFFF) << 16) | (COEF_GU & 0xFFFF))
	ldr r12,= (((COEF_RV & 0xFFFF) << 16) | (COEF_BU & 0xFFFF))
	//Calculate Rbase (R - Y)
	smlawt r5, r4, r12, r4
	//Calculate Gbase (G - Y)
	smulwt r6, r4, r11
	mov r6, r6, lsl #1
	smlawb r6, r8, r11, r6
	//Calculate Bbase (B - Y)
	smulwb r7, r8, r12
	add r7, r8, r7, lsl #1

	mov r11, r3, lsr #16
	and r11, r11, #0xFF
	sub r11, #2
	ldr r10,= (YUV2RGB_ClampRangeBitTable + 256)
	add r10, r11
	ldrb r4, [r10, r5]
	ldrb r11, [r10, r6]
	ldrb r12, [r10, r7]
	orr r4, r4, r11, lsl #5
	orr r4, r4, r12, lsl #10
	orr r4, r4, #0x8000

	ldr r10,= (YUV2RGB_ClampRangeBitTable + 256)
	add r10, r3, lsr #24
	add r10, #2
	ldrb r11, [r10, r6]
	ldrb r12, [r10, r7]
	ldrb r10, [r10, r5]
	orr r10, r10, r11, lsl #5
	orr r10, r10, r12, lsl #10
	orr r10, r10, #0x8000
	orr r10, r4, r10, lsl #16
	str r10, [r2], #4
	//second line
	mov r11, r9, lsr #16
	and r11, r11, #0xFF
	sub r11, #3
	ldr r10,= (YUV2RGB_ClampRangeBitTable + 256)
	add r10, r11
	ldrb r4, [r10, r5]
	ldrb r11, [r10, r6]
	ldrb r12, [r10, r7]
	orr r4, r4, r11, lsl #5
	orr r4, r4, r12, lsl #10
	orr r4, r4, #0x8000

	ldr r10,= (YUV2RGB_ClampRangeBitTable + 256)
	add r10, r9, lsr #24
	add r10, #1
	ldrb r11, [r10, r6]
	ldrb r12, [r10, r7]
	ldrb r10, [r10, r5]
	orr r10, r10, r11, lsl #5
	orr r10, r10, r12, lsl #10
	orr r10, r10, #0x8000
	orr r10, r4, r10, lsl #16
	str r10, [r2, #508]

	subs lr, lr, #4
	ldmlefd sp!, {r4-r11, pc}
	tst lr, #0xFF
	bne loop
	add r0, r0, #256
	add r1, r1, #128
	add r2, r2, #512

	b loop

.pool